<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-us" lang="en-us">
<head>
  <link href="//gmpg.org/xfn/11" rel="profile">
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <meta name="generator" content="Hugo 0.54.0" />

  
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <title>How to: Generate Rails-Compatible html.erb with Hugo &middot; rs.io</title>

  
  <script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML' async></script>


<script async src="https://www.googletagmanager.com/gtag/js?id=UA-12517909-4"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());

gtag('config', 'UA-12517909-4', { 'optimize_id': 'GTM-KG9BTZJ'});
</script>
<script src="https://www.google.com/recaptcha/api.js?render=6LesaLoUAAAAALPXoo08lCE1YXfZ1uTzgh-4qVQk"></script>
    <script>
        grecaptcha.ready(function () {
            grecaptcha.execute('6LesaLoUAAAAALPXoo08lCE1YXfZ1uTzgh-4qVQk', { action: 'subscribe' }).then(function (token) {
                var recaptchaResponse = document.getElementById('recaptchaResponse');
                recaptchaResponse.value = token;
            });
        });
    </script>


<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <link type="text/css" rel="stylesheet" href="https://rs.io/css/print.css" media="print">
  <link type="text/css" rel="stylesheet" href="https://rs.io/css/poole.css">
  <link type="text/css" rel="stylesheet" href="https://rs.io/css/syntax.css">
  <link type="text/css" rel="stylesheet" href="https://rs.io/css/hyde.css">
  
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Abril+Fatface|PT+Sans:400,400i,700">


  
  <link rel="apple-touch-icon-precomposed" sizes="144x144" href="/apple-touch-icon-144-precomposed.png">
  <link rel="shortcut icon" href="/favicon.png">

  
  <link href="https://rs.io/rails-hugo/" rel="canonical" type="text/html" title="rs.io" />
  
</head>

  <body class="theme-base-0d ">
  <aside class="sidebar">
  <div class="container sidebar-sticky">
    <div class="sidebar-about">
      <a href="/guided-tour/"><h1>rs.io</h1></a>
      <p class="lead">
       like being punched in the brain 
      </p>
    </div>

    <nav>
      <ul class="sidebar-nav">
        <li id="start-here"><a href="/guided-tour/">Start Here</a> </li>
        <li><a href="/"> All Articles </a></li><li><a href="/contact/"> Contact </a></li><li><a href="/recommended-reading/"> Recommended Books </a></li>
      </ul>
    </nav>

    <p></p>
  </div>
</aside>

    <main class="content container">
    <div class="post">
  <h1>How to: Generate Rails-Compatible html.erb with Hugo</h1>
  <time datetime=2019-09-24T00:00:00-0500 class="post-date">Tue, Sep 24, 2019</time>
  

<p>Here&rsquo;s how this site is currently generated:</p>

<figure>
    <img src="/ox-hugo/dot_site_generation1.png"/> 
</figure>


<p>This works really great but, thing is, I&rsquo;ve been experimenting with Rails and
I discovered a feature I gotta have: <a href="https://github.com/splitrb/split">split, the hacker-friendly A/B
framework</a>. Flexible content experiments? Drop in your own algorithms?</p>

<p><em>I need it.</em></p>

<p>Except running an experiment in split requires embedding code in a
page&rsquo;s view, you know, <em>dynamically</em>, and all this Hugo output is static. What
to do?</p>

<p>Turns out, we can teach Hugo to generate Rails compatible <code>html.erb</code>
templates. All we gotta do is define a <a href="https://gohugo.io/templates/output-formats/">custom output format</a> for <code>html.erb</code> and
Hugo will turn <code>.md</code> files into that, too.</p>

<p>The new pipeline will be like this:</p>

<figure>
    <img src="/ox-hugo/dot_site_generation2.png"/> 
</figure>


<h2 id="configuring-hugo-to-generate-html-dot-erb">Configuring Hugo to generate html.erb</h2>

<p>Here&rsquo;s what my initial data looked like&ndash;</p>

<pre><code class="language-text">rps@neptune ~/s/rs.io-next&gt; tree content
content
├── email
│   ├── credit-cards.md
│   ├── finding-info.md
│   ├── health-tip.md
│   ├── lies.md
│   ├── reboot.md
│   └── welcome.md
└── posts
    ├── about.md
    ├── book.md
    ├── cuda-r-keras-nixos.md
    ├── pepe-data.md
    ├── rails-static-hugo.md
    ├── rare-pepes.md
    └── start-here.md

2 directories, 13 files
</code></pre>

<p>Here&rsquo;s what I&rsquo;ve added to my <code>config.toml</code>:</p>

<pre><code class="language-toml">uglyURLs = true

[mediaTypes]
  [mediaTypes.&quot;text/x-html-erb&quot;]
    suffixes = [&quot;html.erb&quot;]

[outputFormats]
  [outputFormats.HTML]
    noUgly = true
  [outputFormats.ERB]
    mediaType = &quot;text/x-html-erb&quot;
    isHTML = true
    path = &quot;hugo&quot;

[outputs]
page = [&quot;HTML&quot;, &quot;ERB&quot;]
</code></pre>

<p>The <code>uglyURLs</code> code is necessary so that we don&rsquo;t generate a bunch of
<code>filename/index.html.erb</code> when what we want is <code>filename.html.erb</code> to copy into
Rails.</p>

<p>The <code>path = &quot;hugo&quot;</code> line sets it so that our erb files will be saved to <code>public/hugo</code> and not mixed in with everything else.</p>

<p>Next you&rsquo;ll need to create <code>html.erb</code> versions of some of the templates in
your theme directory.</p>

<pre><code class="language-text">$ ls themes/hyde/layouts/_default/*html.erb

themes/hyde/layouts/_default/baseof.html.erb
themes/hyde/layouts/_default/list.html.erb
themes/hyde/layouts/_default/single.html.erb
</code></pre>

<p>These are what I needed; they&rsquo;re exact copies of the <code>.html</code> versions. Hugo will
use these templates to generate <code>html.erb</code> files. Eventually you&rsquo;ll probably
wish to modify them to not add Hugo&rsquo;s header / footer / etc code, that way you
can have Rails manage that for you.</p>

<p>Now it should work. If yours isn&rsquo;t, I found this <a href="https://jfm.carcosa.net/blog/computing/hugo-gopher/">tutorial on building a custom
output format for Gopher</a> useful in figuring out how they work.</p>

<h2 id="it-lives-it-lives">It lives, it lives!</h2>

<pre><code class="language-text">rps@neptune ~/s/rs.io-next&gt; hugo

                   | EN
+------------------+-----+
  Pages            |  27
  Paginator pages  |   0
  Non-page files   |   0
  Static files     | 580
  Processed images |   0
  Aliases          |   1
  Sitemaps         |   1
  Cleaned          |   0

Total in 99 ms
</code></pre>

<p>Here is what <code>public/hugo</code> looks like now&ndash;</p>

<pre><code class="language-text">rps@neptune ~/s/rs.io-next&gt; tree public/hugo
public/hugo
├── email
│   ├── credit-cards.html.erb
│   ├── finding-info.html.erb
│   ├── health-tip.html.erb
│   ├── lies.html.erb
│   ├── reboot.html.erb
│   └── welcome.html.erb
└── posts
    ├── book.html.erb
    └── cuda-r-keras-nixos.html.erb

2 directories, 8 files
</code></pre>

<p>Look at all those sweet, sweet erb files!</p>

<p>Now, in your Rails app, create the folder <code>app/views/pages</code> and <code>cp -r public/hugo/*</code>
to it, looking something like&ndash;</p>

<pre><code class="language-text">/home/rps/src/rs.io-rails/app/views/
├── layouts
│   ├── application.html.erb
│   ├── mailer.html.erb
│   └── mailer.text.erb
└── pages
    ├── email
    │   ├── credit-cards.html.erb
    │   ├── finding-info.html.erb
    │   ├── health-tip.html.erb
    │   ├── lies.html.erb
    │   ├── reboot.html.erb
    │   └── welcome.html.erb
    └── posts
        ├── book.html.erb
        └── cuda-r-keras-nixos.html.erb

4 directories, 11 files
</code></pre>

<p>Then, to your Gemfile add <code>high_voltage</code>. It generates static pages and will
manage the copied <code>html.erb</code> files for us. You&rsquo;ll need to create the
initializer, too.</p>

<pre><code class="language-ruby"># config/initializers/high_voltage.rb
HighVoltage.configure do |config|
  config.route_drawer = HighVoltage::RouteDrawers::Root
end
</code></pre>

<p>Without it, all the erb files imported from Hugo will be at
<code>http://localhost:3000/pages/&lt;filename&gt;</code>. The above removes <code>/pages/</code> from the
URL, otherwise your links will likely to be off in your Hugo-gen&rsquo;d <code>.erb</code>.</p>

<p>Rails should now be serving your Hugo imports. For example
<code>app/views/pages/posts/cuda-r-keras-nixos.html.erb</code> will be at
<code>http://localhost:3000/posts/cuda-r-keras-nixos</code>.</p>

<h2 id="tidying-up">Tidying up</h2>

<p>Once you&rsquo;ve got it working, you&rsquo;re going to want to go back and remove
<code>public/hugo</code> and replace it with a symbolic link to <code>app/views/pages</code> so that
Rails&rsquo; folder is automatically updated whenever you trigger a regen with Hugo,
i.e.</p>

<pre><code class="language-text">ln -s /home/rps/src/rs.io-rails/app/views/pages/ /home/rps/src/rs.io-next/public/hugo
</code></pre>

<p>You&rsquo;ll also want to move and link the static assets from your <code>$HUGO_APP/public</code> folder into
<code>$RAILS_APP/public</code>.</p>

<pre><code class="language-text">$ mv $HUGO_APP/public/css $RAILS_APP/public/
$ ln -s $RAILS_APP/public/css $HUGO_APP/public/css
</code></pre>

<p>Rinse &amp; repeat for the other static folders.</p>

</div>


    </main>

    
<script type="application/javascript">
var doNotTrack = false;
if (!doNotTrack) {
	window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
	ga('create', 'UA-12517909-4', 'auto');
	
	ga('send', 'pageview');
}
</script>
<script async src='https://www.google-analytics.com/analytics.js'></script>

  </body>
</html>
